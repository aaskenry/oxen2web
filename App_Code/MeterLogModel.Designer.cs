//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
namespace MeterLogModel
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class MeterLogEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new MeterLogEntities object using the connection string found in the 'MeterLogEntities' section of the application configuration file.
        /// </summary>
        public MeterLogEntities() : base("name=MeterLogEntities", "MeterLogEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new MeterLogEntities object.
        /// </summary>
        public MeterLogEntities(string connectionString) : base(connectionString, "MeterLogEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new MeterLogEntities object.
        /// </summary>
        public MeterLogEntities(EntityConnection connection) : base(connection, "MeterLogEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ElectricMeter> ElectricMeter
        {
            get
            {
                if ((_ElectricMeter == null))
                {
                    _ElectricMeter = base.CreateObjectSet<ElectricMeter>("ElectricMeter");
                }
                return _ElectricMeter;
            }
        }
        private ObjectSet<ElectricMeter> _ElectricMeter;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<HeaterMeter> HeaterMeter
        {
            get
            {
                if ((_HeaterMeter == null))
                {
                    _HeaterMeter = base.CreateObjectSet<HeaterMeter>("HeaterMeter");
                }
                return _HeaterMeter;
            }
        }
        private ObjectSet<HeaterMeter> _HeaterMeter;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Temperature> Temperature
        {
            get
            {
                if ((_Temperature == null))
                {
                    _Temperature = base.CreateObjectSet<Temperature>("Temperature");
                }
                return _Temperature;
            }
        }
        private ObjectSet<Temperature> _Temperature;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<WaterMeter> WaterMeter
        {
            get
            {
                if ((_WaterMeter == null))
                {
                    _WaterMeter = base.CreateObjectSet<WaterMeter>("WaterMeter");
                }
                return _WaterMeter;
            }
        }
        private ObjectSet<WaterMeter> _WaterMeter;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<HeaterMeterDaily> HeaterMeterDaily
        {
            get
            {
                if ((_HeaterMeterDaily == null))
                {
                    _HeaterMeterDaily = base.CreateObjectSet<HeaterMeterDaily>("HeaterMeterDaily");
                }
                return _HeaterMeterDaily;
            }
        }
        private ObjectSet<HeaterMeterDaily> _HeaterMeterDaily;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<HeaterMeterMonthly> HeaterMeterMonthly
        {
            get
            {
                if ((_HeaterMeterMonthly == null))
                {
                    _HeaterMeterMonthly = base.CreateObjectSet<HeaterMeterMonthly>("HeaterMeterMonthly");
                }
                return _HeaterMeterMonthly;
            }
        }
        private ObjectSet<HeaterMeterMonthly> _HeaterMeterMonthly;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ElectricMeterDaily> ElectricMeterDaily
        {
            get
            {
                if ((_ElectricMeterDaily == null))
                {
                    _ElectricMeterDaily = base.CreateObjectSet<ElectricMeterDaily>("ElectricMeterDaily");
                }
                return _ElectricMeterDaily;
            }
        }
        private ObjectSet<ElectricMeterDaily> _ElectricMeterDaily;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ElectricMeterMonthly> ElectricMeterMonthly
        {
            get
            {
                if ((_ElectricMeterMonthly == null))
                {
                    _ElectricMeterMonthly = base.CreateObjectSet<ElectricMeterMonthly>("ElectricMeterMonthly");
                }
                return _ElectricMeterMonthly;
            }
        }
        private ObjectSet<ElectricMeterMonthly> _ElectricMeterMonthly;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<WaterMeterDaily> WaterMeterDaily
        {
            get
            {
                if ((_WaterMeterDaily == null))
                {
                    _WaterMeterDaily = base.CreateObjectSet<WaterMeterDaily>("WaterMeterDaily");
                }
                return _WaterMeterDaily;
            }
        }
        private ObjectSet<WaterMeterDaily> _WaterMeterDaily;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<WaterMeterMonthly> WaterMeterMonthly
        {
            get
            {
                if ((_WaterMeterMonthly == null))
                {
                    _WaterMeterMonthly = base.CreateObjectSet<WaterMeterMonthly>("WaterMeterMonthly");
                }
                return _WaterMeterMonthly;
            }
        }
        private ObjectSet<WaterMeterMonthly> _WaterMeterMonthly;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ElectricMeter EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToElectricMeter(ElectricMeter electricMeter)
        {
            base.AddObject("ElectricMeter", electricMeter);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the HeaterMeter EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToHeaterMeter(HeaterMeter heaterMeter)
        {
            base.AddObject("HeaterMeter", heaterMeter);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Temperature EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTemperature(Temperature temperature)
        {
            base.AddObject("Temperature", temperature);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the WaterMeter EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToWaterMeter(WaterMeter waterMeter)
        {
            base.AddObject("WaterMeter", waterMeter);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the HeaterMeterDaily EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToHeaterMeterDaily(HeaterMeterDaily heaterMeterDaily)
        {
            base.AddObject("HeaterMeterDaily", heaterMeterDaily);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the HeaterMeterMonthly EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToHeaterMeterMonthly(HeaterMeterMonthly heaterMeterMonthly)
        {
            base.AddObject("HeaterMeterMonthly", heaterMeterMonthly);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ElectricMeterDaily EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToElectricMeterDaily(ElectricMeterDaily electricMeterDaily)
        {
            base.AddObject("ElectricMeterDaily", electricMeterDaily);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ElectricMeterMonthly EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToElectricMeterMonthly(ElectricMeterMonthly electricMeterMonthly)
        {
            base.AddObject("ElectricMeterMonthly", electricMeterMonthly);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the WaterMeterDaily EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToWaterMeterDaily(WaterMeterDaily waterMeterDaily)
        {
            base.AddObject("WaterMeterDaily", waterMeterDaily);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the WaterMeterMonthly EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToWaterMeterMonthly(WaterMeterMonthly waterMeterMonthly)
        {
            base.AddObject("WaterMeterMonthly", waterMeterMonthly);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MeterLogModel", Name="ElectricMeter")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ElectricMeter : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ElectricMeter object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="time">Initial value of the time property.</param>
        /// <param name="value">Initial value of the value property.</param>
        public static ElectricMeter CreateElectricMeter(global::System.Int32 id, global::System.DateTime time, global::System.Double value)
        {
            ElectricMeter electricMeter = new ElectricMeter();
            electricMeter.id = id;
            electricMeter.time = time;
            electricMeter.value = value;
            return electricMeter;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime time
        {
            get
            {
                return _time;
            }
            set
            {
                OntimeChanging(value);
                ReportPropertyChanging("time");
                _time = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("time");
                OntimeChanged();
            }
        }
        private global::System.DateTime _time;
        partial void OntimeChanging(global::System.DateTime value);
        partial void OntimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double value
        {
            get
            {
                return _value;
            }
            set
            {
                OnvalueChanging(value);
                ReportPropertyChanging("value");
                _value = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("value");
                OnvalueChanged();
            }
        }
        private global::System.Double _value;
        partial void OnvalueChanging(global::System.Double value);
        partial void OnvalueChanged();

        #endregion

    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MeterLogModel", Name="ElectricMeterDaily")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ElectricMeterDaily : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ElectricMeterDaily object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="time">Initial value of the time property.</param>
        /// <param name="value">Initial value of the value property.</param>
        public static ElectricMeterDaily CreateElectricMeterDaily(global::System.Int32 id, global::System.DateTime time, global::System.Double value)
        {
            ElectricMeterDaily electricMeterDaily = new ElectricMeterDaily();
            electricMeterDaily.id = id;
            electricMeterDaily.time = time;
            electricMeterDaily.value = value;
            return electricMeterDaily;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime time
        {
            get
            {
                return _time;
            }
            set
            {
                OntimeChanging(value);
                ReportPropertyChanging("time");
                _time = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("time");
                OntimeChanged();
            }
        }
        private global::System.DateTime _time;
        partial void OntimeChanging(global::System.DateTime value);
        partial void OntimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double value
        {
            get
            {
                return _value;
            }
            set
            {
                OnvalueChanging(value);
                ReportPropertyChanging("value");
                _value = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("value");
                OnvalueChanged();
            }
        }
        private global::System.Double _value;
        partial void OnvalueChanging(global::System.Double value);
        partial void OnvalueChanged();

        #endregion

    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MeterLogModel", Name="ElectricMeterMonthly")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ElectricMeterMonthly : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ElectricMeterMonthly object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="time">Initial value of the time property.</param>
        /// <param name="value">Initial value of the value property.</param>
        public static ElectricMeterMonthly CreateElectricMeterMonthly(global::System.Int32 id, global::System.DateTime time, global::System.Double value)
        {
            ElectricMeterMonthly electricMeterMonthly = new ElectricMeterMonthly();
            electricMeterMonthly.id = id;
            electricMeterMonthly.time = time;
            electricMeterMonthly.value = value;
            return electricMeterMonthly;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime time
        {
            get
            {
                return _time;
            }
            set
            {
                OntimeChanging(value);
                ReportPropertyChanging("time");
                _time = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("time");
                OntimeChanged();
            }
        }
        private global::System.DateTime _time;
        partial void OntimeChanging(global::System.DateTime value);
        partial void OntimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double value
        {
            get
            {
                return _value;
            }
            set
            {
                OnvalueChanging(value);
                ReportPropertyChanging("value");
                _value = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("value");
                OnvalueChanged();
            }
        }
        private global::System.Double _value;
        partial void OnvalueChanging(global::System.Double value);
        partial void OnvalueChanged();

        #endregion

    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MeterLogModel", Name="HeaterMeter")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class HeaterMeter : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new HeaterMeter object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="time">Initial value of the time property.</param>
        /// <param name="energy">Initial value of the energy property.</param>
        /// <param name="volume">Initial value of the volume property.</param>
        /// <param name="tempin">Initial value of the tempin property.</param>
        /// <param name="tempout">Initial value of the tempout property.</param>
        /// <param name="tempdiff">Initial value of the tempdiff property.</param>
        /// <param name="power">Initial value of the power property.</param>
        /// <param name="flow">Initial value of the flow property.</param>
        public static HeaterMeter CreateHeaterMeter(global::System.Int32 id, global::System.DateTime time, global::System.Double energy, global::System.Double volume, global::System.Double tempin, global::System.Double tempout, global::System.Double tempdiff, global::System.Double power, global::System.Double flow)
        {
            HeaterMeter heaterMeter = new HeaterMeter();
            heaterMeter.id = id;
            heaterMeter.time = time;
            heaterMeter.energy = energy;
            heaterMeter.volume = volume;
            heaterMeter.tempin = tempin;
            heaterMeter.tempout = tempout;
            heaterMeter.tempdiff = tempdiff;
            heaterMeter.power = power;
            heaterMeter.flow = flow;
            return heaterMeter;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime time
        {
            get
            {
                return _time;
            }
            set
            {
                OntimeChanging(value);
                ReportPropertyChanging("time");
                _time = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("time");
                OntimeChanged();
            }
        }
        private global::System.DateTime _time;
        partial void OntimeChanging(global::System.DateTime value);
        partial void OntimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double energy
        {
            get
            {
                return _energy;
            }
            set
            {
                OnenergyChanging(value);
                ReportPropertyChanging("energy");
                _energy = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("energy");
                OnenergyChanged();
            }
        }
        private global::System.Double _energy;
        partial void OnenergyChanging(global::System.Double value);
        partial void OnenergyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double volume
        {
            get
            {
                return _volume;
            }
            set
            {
                OnvolumeChanging(value);
                ReportPropertyChanging("volume");
                _volume = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("volume");
                OnvolumeChanged();
            }
        }
        private global::System.Double _volume;
        partial void OnvolumeChanging(global::System.Double value);
        partial void OnvolumeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double tempin
        {
            get
            {
                return _tempin;
            }
            set
            {
                OntempinChanging(value);
                ReportPropertyChanging("tempin");
                _tempin = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("tempin");
                OntempinChanged();
            }
        }
        private global::System.Double _tempin;
        partial void OntempinChanging(global::System.Double value);
        partial void OntempinChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double tempout
        {
            get
            {
                return _tempout;
            }
            set
            {
                OntempoutChanging(value);
                ReportPropertyChanging("tempout");
                _tempout = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("tempout");
                OntempoutChanged();
            }
        }
        private global::System.Double _tempout;
        partial void OntempoutChanging(global::System.Double value);
        partial void OntempoutChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double tempdiff
        {
            get
            {
                return _tempdiff;
            }
            set
            {
                OntempdiffChanging(value);
                ReportPropertyChanging("tempdiff");
                _tempdiff = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("tempdiff");
                OntempdiffChanged();
            }
        }
        private global::System.Double _tempdiff;
        partial void OntempdiffChanging(global::System.Double value);
        partial void OntempdiffChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double power
        {
            get
            {
                return _power;
            }
            set
            {
                OnpowerChanging(value);
                ReportPropertyChanging("power");
                _power = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("power");
                OnpowerChanged();
            }
        }
        private global::System.Double _power;
        partial void OnpowerChanging(global::System.Double value);
        partial void OnpowerChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double flow
        {
            get
            {
                return _flow;
            }
            set
            {
                OnflowChanging(value);
                ReportPropertyChanging("flow");
                _flow = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("flow");
                OnflowChanged();
            }
        }
        private global::System.Double _flow;
        partial void OnflowChanging(global::System.Double value);
        partial void OnflowChanged();

        #endregion

    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MeterLogModel", Name="HeaterMeterDaily")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class HeaterMeterDaily : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new HeaterMeterDaily object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="time">Initial value of the time property.</param>
        /// <param name="energy">Initial value of the energy property.</param>
        /// <param name="volume">Initial value of the volume property.</param>
        public static HeaterMeterDaily CreateHeaterMeterDaily(global::System.Int32 id, global::System.DateTime time, global::System.Double energy, global::System.Double volume)
        {
            HeaterMeterDaily heaterMeterDaily = new HeaterMeterDaily();
            heaterMeterDaily.id = id;
            heaterMeterDaily.time = time;
            heaterMeterDaily.energy = energy;
            heaterMeterDaily.volume = volume;
            return heaterMeterDaily;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime time
        {
            get
            {
                return _time;
            }
            set
            {
                OntimeChanging(value);
                ReportPropertyChanging("time");
                _time = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("time");
                OntimeChanged();
            }
        }
        private global::System.DateTime _time;
        partial void OntimeChanging(global::System.DateTime value);
        partial void OntimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double energy
        {
            get
            {
                return _energy;
            }
            set
            {
                OnenergyChanging(value);
                ReportPropertyChanging("energy");
                _energy = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("energy");
                OnenergyChanged();
            }
        }
        private global::System.Double _energy;
        partial void OnenergyChanging(global::System.Double value);
        partial void OnenergyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double volume
        {
            get
            {
                return _volume;
            }
            set
            {
                OnvolumeChanging(value);
                ReportPropertyChanging("volume");
                _volume = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("volume");
                OnvolumeChanged();
            }
        }
        private global::System.Double _volume;
        partial void OnvolumeChanging(global::System.Double value);
        partial void OnvolumeChanged();

        #endregion

    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MeterLogModel", Name="HeaterMeterMonthly")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class HeaterMeterMonthly : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new HeaterMeterMonthly object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="time">Initial value of the time property.</param>
        /// <param name="energy">Initial value of the energy property.</param>
        /// <param name="volume">Initial value of the volume property.</param>
        /// <param name="peak">Initial value of the peak property.</param>
        public static HeaterMeterMonthly CreateHeaterMeterMonthly(global::System.Int32 id, global::System.DateTime time, global::System.Double energy, global::System.Double volume, global::System.Double peak)
        {
            HeaterMeterMonthly heaterMeterMonthly = new HeaterMeterMonthly();
            heaterMeterMonthly.id = id;
            heaterMeterMonthly.time = time;
            heaterMeterMonthly.energy = energy;
            heaterMeterMonthly.volume = volume;
            heaterMeterMonthly.peak = peak;
            return heaterMeterMonthly;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime time
        {
            get
            {
                return _time;
            }
            set
            {
                OntimeChanging(value);
                ReportPropertyChanging("time");
                _time = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("time");
                OntimeChanged();
            }
        }
        private global::System.DateTime _time;
        partial void OntimeChanging(global::System.DateTime value);
        partial void OntimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double energy
        {
            get
            {
                return _energy;
            }
            set
            {
                OnenergyChanging(value);
                ReportPropertyChanging("energy");
                _energy = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("energy");
                OnenergyChanged();
            }
        }
        private global::System.Double _energy;
        partial void OnenergyChanging(global::System.Double value);
        partial void OnenergyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double volume
        {
            get
            {
                return _volume;
            }
            set
            {
                OnvolumeChanging(value);
                ReportPropertyChanging("volume");
                _volume = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("volume");
                OnvolumeChanged();
            }
        }
        private global::System.Double _volume;
        partial void OnvolumeChanging(global::System.Double value);
        partial void OnvolumeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double peak
        {
            get
            {
                return _peak;
            }
            set
            {
                OnpeakChanging(value);
                ReportPropertyChanging("peak");
                _peak = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("peak");
                OnpeakChanged();
            }
        }
        private global::System.Double _peak;
        partial void OnpeakChanging(global::System.Double value);
        partial void OnpeakChanged();

        #endregion

    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MeterLogModel", Name="Temperature")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Temperature : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Temperature object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="time">Initial value of the time property.</param>
        /// <param name="name">Initial value of the name property.</param>
        /// <param name="value">Initial value of the value property.</param>
        public static Temperature CreateTemperature(global::System.Int32 id, global::System.DateTime time, global::System.String name, global::System.Double value)
        {
            Temperature temperature = new Temperature();
            temperature.id = id;
            temperature.time = time;
            temperature.name = name;
            temperature.value = value;
            return temperature;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime time
        {
            get
            {
                return _time;
            }
            set
            {
                OntimeChanging(value);
                ReportPropertyChanging("time");
                _time = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("time");
                OntimeChanged();
            }
        }
        private global::System.DateTime _time;
        partial void OntimeChanging(global::System.DateTime value);
        partial void OntimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double value
        {
            get
            {
                return _value;
            }
            set
            {
                OnvalueChanging(value);
                ReportPropertyChanging("value");
                _value = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("value");
                OnvalueChanged();
            }
        }
        private global::System.Double _value;
        partial void OnvalueChanging(global::System.Double value);
        partial void OnvalueChanged();

        #endregion

    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MeterLogModel", Name="WaterMeter")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WaterMeter : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new WaterMeter object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="time">Initial value of the time property.</param>
        /// <param name="value">Initial value of the value property.</param>
        public static WaterMeter CreateWaterMeter(global::System.Int32 id, global::System.DateTime time, global::System.Int32 value)
        {
            WaterMeter waterMeter = new WaterMeter();
            waterMeter.id = id;
            waterMeter.time = time;
            waterMeter.value = value;
            return waterMeter;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime time
        {
            get
            {
                return _time;
            }
            set
            {
                OntimeChanging(value);
                ReportPropertyChanging("time");
                _time = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("time");
                OntimeChanged();
            }
        }
        private global::System.DateTime _time;
        partial void OntimeChanging(global::System.DateTime value);
        partial void OntimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 value
        {
            get
            {
                return _value;
            }
            set
            {
                OnvalueChanging(value);
                ReportPropertyChanging("value");
                _value = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("value");
                OnvalueChanged();
            }
        }
        private global::System.Int32 _value;
        partial void OnvalueChanging(global::System.Int32 value);
        partial void OnvalueChanged();

        #endregion

    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MeterLogModel", Name="WaterMeterDaily")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WaterMeterDaily : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new WaterMeterDaily object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="time">Initial value of the time property.</param>
        /// <param name="value">Initial value of the value property.</param>
        public static WaterMeterDaily CreateWaterMeterDaily(global::System.Int32 id, global::System.DateTime time, global::System.Int32 value)
        {
            WaterMeterDaily waterMeterDaily = new WaterMeterDaily();
            waterMeterDaily.id = id;
            waterMeterDaily.time = time;
            waterMeterDaily.value = value;
            return waterMeterDaily;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime time
        {
            get
            {
                return _time;
            }
            set
            {
                OntimeChanging(value);
                ReportPropertyChanging("time");
                _time = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("time");
                OntimeChanged();
            }
        }
        private global::System.DateTime _time;
        partial void OntimeChanging(global::System.DateTime value);
        partial void OntimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 value
        {
            get
            {
                return _value;
            }
            set
            {
                OnvalueChanging(value);
                ReportPropertyChanging("value");
                _value = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("value");
                OnvalueChanged();
            }
        }
        private global::System.Int32 _value;
        partial void OnvalueChanging(global::System.Int32 value);
        partial void OnvalueChanged();

        #endregion

    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MeterLogModel", Name="WaterMeterMonthly")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WaterMeterMonthly : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new WaterMeterMonthly object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="time">Initial value of the time property.</param>
        /// <param name="value">Initial value of the value property.</param>
        public static WaterMeterMonthly CreateWaterMeterMonthly(global::System.Int32 id, global::System.DateTime time, global::System.Int32 value)
        {
            WaterMeterMonthly waterMeterMonthly = new WaterMeterMonthly();
            waterMeterMonthly.id = id;
            waterMeterMonthly.time = time;
            waterMeterMonthly.value = value;
            return waterMeterMonthly;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime time
        {
            get
            {
                return _time;
            }
            set
            {
                OntimeChanging(value);
                ReportPropertyChanging("time");
                _time = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("time");
                OntimeChanged();
            }
        }
        private global::System.DateTime _time;
        partial void OntimeChanging(global::System.DateTime value);
        partial void OntimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 value
        {
            get
            {
                return _value;
            }
            set
            {
                OnvalueChanging(value);
                ReportPropertyChanging("value");
                _value = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("value");
                OnvalueChanged();
            }
        }
        private global::System.Int32 _value;
        partial void OnvalueChanging(global::System.Int32 value);
        partial void OnvalueChanged();

        #endregion

    
    }

    #endregion

    
}
